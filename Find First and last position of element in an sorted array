
// Brute Force Approach
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int start=-1,end=-1;
        int flag=1;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==target)
            {
                if(flag==1)
                {
                    start=i;
                    flag=0;
                }
                else
                {
                    end=i;
                }
            }
        }
        if(start!=-1&&end==-1)
        {
            end=start;
        }
        vector<int>ans;
        ans.push_back(start);
        ans.push_back(end);
        return ans;
    }
};

// Optimized solution

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
       int lb=lower_bound(nums.begin(),nums.end(),target)-nums.begin();
       if(lb==nums.size() || nums[lb]!=target)
       {
            return {-1,-1};
       } 
       int ub=upper_bound(nums.begin(),nums.end(),target)-nums.begin();
       return {lb,ub-1};
    }
};
