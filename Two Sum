# METHODE 1 (Brute Force Approach)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    vector<int>ans;
    for(int i=0;i<nums.size();i++)
    {
        for(int j=i+1;j<nums.size();j++)
        {
            if(nums[i]+nums[j]==target)
            {
                ans.push_back(i);
                ans.push_back(j);
            }
        }
    }
        return ans;
    }
};

# METHODE 2 (Hashing) (Better Approach) 

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int num,req;
        int n=nums.size();
        unordered_map<int,int>mpp;
        for(int i=0;i<n;i++)
        {
            num=nums[i];
            req=target-num;
            if(mpp.find(req)!=mpp.end())
            {
                return {mpp[req],i};
            }
            mpp[num]=i;
        }
        return {-1,-1};
    }
};
