Brute Force Approach

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        vector<int>nums;
        ListNode*temp=head;
        while(temp)
        {
            nums.push_back(temp->val);
            temp=temp->next;
        }
        reverse(nums.begin(),nums.end());
        temp=head;
        int i=0;
        while(temp)
        {
            temp->val=nums[i];
            i++;
            temp=temp->next;
        }
        return head;
    }
};

Optimized Aprroach (Iterative)

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        ListNode*front;
        ListNode*prev=nullptr;
        ListNode*temp=head;

        while(temp)
        {
            front=temp->next;
            temp->next=prev;
            prev=temp;
            temp=front;
        }
        head=prev;
        return head;
    }
};


Optimized Approach (Recursive)

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        if(head == nullptr || head->next == nullptr)
        {
            return head;
        }
        ListNode*newhead=reverseList(head->next);

        ListNode*front=head->next;
        front->next=head;
        head->next=nullptr;

        return newhead;
    }
};
