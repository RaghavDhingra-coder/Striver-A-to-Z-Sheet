class Solution {
  public:
    vector<int> getFloorAndCeil(int x, vector<int> &arr) {
        int i;
        int floor=-1;
        int ceil=-1;
        int flag=0;
        for(int i=0;i<arr.size();i++)
        {
            // floor value
            if(arr[i]>floor&&arr[i]<=x)
            {
                floor=arr[i];
            }
            // ceil value
            if(arr[i]>=x)
            {
                if(flag==0)
                    {ceil=arr[i];
                        flag=1;
                    }
                else
                {
                    if(arr[i]<ceil)
                        ceil=arr[i];
                }
                
            }
            
        }
        vector<int>ans;
        ans.push_back(floor);
        ans.push_back(ceil);
        return ans;
    }
};

// Optimized Approach

pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
	// floor
	int low=0,high=n-1,mid;
	int floor=-1,ceil=-1;
	while(low<=high)
	{
		mid=(low+high)/2;
		if(a[mid]<=x)
		{
			floor=a[mid];
			low=mid+1;
		}
		else
		{
			high=mid-1;
		}
	}
	int lb=lower_bound(a.begin(),a.end(),x)-a.begin();
	if(lb!=n)
	{
		ceil=a[lb];
	}
	pair<int,int>p;
	p.first=floor;
	p.second=ceil;
	return p;
}
